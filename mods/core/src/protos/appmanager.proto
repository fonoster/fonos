/**
 * MIT License
 * Copyright (c) 2020 Fonoster Inc
 *
 * The AppMananger proto contains the artificats for apps administration
 * such as creation and deployment.
 */
syntax = "proto3";

package fonos.appmanager.v1alpha1;

import "common.proto";

service AppManager {
  // Lists user applications
  rpc ListApps (ListAppsRequest) returns (ListAppsResponse) {};
  // Gets app with the app-name
  rpc GetApp (GetAppRequest) returns (App) {};
  // Creates a new resource type app. Fails with ALREADY_EXISTS if
  // app-name is present in the system. The application creation, consist of:
  //
  //    1. Validing a Fonos App
  //    2. Zipping (or taring) the application
  //    3. Uploading the the file to a fonos endpoint
  //    4. Registering and activatng the application
  rpc CreateApp (CreateAppRequest) returns (App) {};
  // Updates an app resource
  rpc UpdateApp (UpdateAppRequest) returns (App) {};
  // Peforms a hard delete of the app resource
  rpc DeleteApp (DeleteAppRequest) returns (fonos.common.v1alpha1.Empty) {};
}

message ListAppsRequest {
  // The maximum number of items to return.
  int32 page_size = 1;

  // The next_page_token value returned from a previous List request, if any.
  string page_token = 2;

  // Level of detail of the individual entities
  fonos.common.v1alpha1.View view = 3;
}

message ListAppsResponse {
  // There will be a maximum number of items returned based on the page_size field
  // in the request.
  repeated App apps = 1;

  // Token to retrieve the next page of results, or empty if there are no
  // more results in the list.
  string next_page_token = 2;
}

message GetAppRequest {
  // The field will contain the reference of the app requested, for example:
  // "apps/hello-world"
  string name = 1;
  // Requested level of detail
  fonos.common.v1alpha1.View view = 2;
}

message CreateAppRequest {
  App app = 2;
}

message UpdateAppRequest {
  App app = 2;
}

message DeleteAppRequest {
  string name = 1;
}

// An app resource with metadata used by the media controller
message App {
  enum Status {
    UNKNOWN = 0;
    // The application is in the process of being deployed
    CREATING = 1;
    // The application is ready for usage
    RUNNING = 2;
    // Was stopped from by the client
    STOPPED = 3;
    // Application was hidden
    REMOVED = 4;
  }
  string name = 1;
  string description = 2;
  // TODO: Find a better way to store this information
  string create_time = 3;
  string update_time = 4;
  Status status = 5;
  string bucket = 6;
  map <string, string> labels = 7;
}
