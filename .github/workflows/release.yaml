name: release

on:
  # push:
  #   paths:
  #   - mods/**
  #   - asterisk/**
  #   branches:
  #   - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GH_PAT }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "20.x"

    - name: Install dependencies and build
      run: |
        npm install
        npm run build

    - name: Run unit tests
      run: |
        cp .env.example.dev .env 
        npm run test

    # We will do this manually for now
    # - name: Check for next release
    #   run: |
    #     release=$(.scripts/next-release.sh)
    #     echo "Next release: $release"
    #     echo "RELEASE=$release" >> $GITHUB_ENV

    # - name: Publish packages to NPM
    #   if: env.RELEASE != 'none'
    #   run: |
    #     echo "NPM_TOKEN=${{ secrets.NPM_TOKEN }}" >> $GITHUB_ENV
    #     echo "GITHUB_TOKEN=${{ secrets.GH_PAT }}" >> $GITHUB_ENV
    #     echo "@routr:registry=https://registry.npmjs.org/" > .npmrc
    #     echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" >> .npmrc

    #     git config --global user.name "GitHub Actions Bot"
    #     git config --global user.email "github-actions[bot]@users.noreply.github.com"
    #     git checkout package-lock.json

    #     npm run release
  
    - name: Get version from Lerna
      run: |
        lerna_version=$(node -p "require('./lerna.json').version")
        echo "LERNA_VERSION=$lerna_version" >> $GITHUB_ENV

    - name: Create release note
      if: env.RELEASE != 'none'
      id: changelog
      uses: loopwerk/tag-changelog@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        exclude_types: other,doc,chore
        config_file: ./.scripts/tag-changelog-config.js

    - name: Create draft release
      if: env.RELEASE != 'none'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.LERNA_VERSION }}
        release_name: Release v${{ env.LERNA_VERSION }}
        body: ${{ steps.changelog.outputs.changelog }}
        draft: true

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Publish the APIServer to Docker Hub
      uses: elgohr/Publish-Docker-Github-Action@v5
      with:
        name: fonoster/apiserver
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}
        context: .
        dockerfile: mods/apiserver/Dockerfile     
        tags: "latest,${{ env.LERNA_VERSION }}"
        platforms: linux/amd64,linux/arm64

    - name: Publish Autopilot to Docker Hub
      uses: elgohr/Publish-Docker-Github-Action@v5
      with:
        name: fonoster/autopilot
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}
        context: .
        dockerfile: mods/autopilot/Dockerfile
        tags: "latest,${{ env.LERNA_VERSION }}"
        platforms: linux/amd64,linux/arm64

    - name: Publish Asterisk to Docker Hub
      uses: elgohr/Publish-Docker-Github-Action@v5
      with:
        name: fonoster/asterisk   
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}
        context: .
        dockerfile: asterisk/Dockerfile     
        tags: "latest, 20"
        platforms: linux/amd64,linux/arm64

    - name: Starting services for integration tests
      run: |
        npm run generate:keypair
        cp .env.example .env
        cp config/integrations.example.json config/integrations.json
        sed -i "s|DOCKER_HOST_ADDRESS=.*|DOCKER_HOST_ADDRESS=127.0.0.1|g" .env 
        sed -i "s|ASTERISK_SIPPROXY_HOST=.*|ASTERISK_SIPPROXY_HOST=127.0.0.1|g" .env
        sed -i "s|SMTP_HOST=.*|SMTP_HOST=mailhog|g" .env
        sed -i "s|SMTP_PORT=.*|SMTP_PORT=1025|g" .env
        sed -i "s|SMTP_SECURE=.*|SMTP_SECURE=false|g" .env
        docker compose -f compose.yaml -f compose.dev.yaml up -d envoy routr nats postgres apiserver asterisk mailhog

    - name: Waiting for services to be ready
      run: |
        sleep 30
        docker ps -a

    - name: Run integration tests for the SDK
      uses: nick-fields/retry@v2
      with:
        timeout_minutes: 1
        # This makes sure Routr is ready before running the tests
        # We could improve this by checking the status of the services
        retry_wait_seconds: 30
        max_attempts: 2
        command: npm run integration
