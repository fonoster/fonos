"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9688],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>c});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),d=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=d(r),k=a,c=u["".concat(s,".").concat(k)]||u[k]||m[k]||l;return r?n.createElement(c,o(o({ref:t},p),{},{components:r})):n.createElement(c,o({ref:t},p))}));function c(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=r.length,o=new Array(l);o[0]=k;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:a,o[1]=i;for(var d=2;d<l;d++)o[d]=r[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}k.displayName="MDXCreateElement"},4506:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>d});var n=r(7462),a=(r(7294),r(3905));const l={},o=void 0,i={unversionedId:"reference/Providers",id:"reference/Providers",title:"Providers",description:"Providers \u21d0 APIClient",source:"@site/docs/reference/Providers.md",sourceDirName:"reference",slug:"/reference/Providers",permalink:"/docs/reference/Providers",draft:!1,editUrl:"https://github.com/fonoster/website/edit/main/docs/docs/reference/Providers.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Projects",permalink:"/docs/reference/Projects"},next:{title:"Numbers",permalink:"/docs/reference/Numbers"}},s={},d=[{value:"Providers \u21d0 <code>APIClient</code>",id:"providers--apiclient",level:2},{value:"new Providers(options)",id:"new-providersoptions",level:3},{value:"providers.createProvider(request) \u21d2 <code>Promise.&lt;Object&gt;</code>",id:"providerscreateproviderrequest--promiseobject",level:3},{value:"providers.getProvider(ref) \u21d2 <code>Promise.&lt;Object&gt;</code>",id:"providersgetproviderref--promiseobject",level:3},{value:"providers.updateProvider(request) \u21d2 <code>Promise.&lt;Object&gt;</code>",id:"providersupdateproviderrequest--promiseobject",level:3},{value:"providers.listProviders(request) \u21d2 <code>Promise.&lt;ListProvidersResponse&gt;</code>",id:"providerslistprovidersrequest--promiselistprovidersresponse",level:3},{value:"providers.deleteProvider(ref)",id:"providersdeleteproviderref",level:3}],p={toc:d},u="wrapper";function m(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("a",{name:"Providers"}),(0,a.kt)("h2",{id:"providers--apiclient"},"Providers \u21d0 ",(0,a.kt)("code",null,"APIClient")),(0,a.kt)("p",null,"Use Fonoster Providers, a capability of Fonoster SIP Proxy subsystem,\nto create, update, get and delete providers. Fonoster Providers requires of a\nrunning Fonosterdeployment."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Kind"),": global class",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Extends"),": ",(0,a.kt)("code",null,"APIClient"),(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"See"),": module:core:APIClient  "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#Providers"},"Providers")," \u21d0 ",(0,a.kt)("code",null,"APIClient"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#new_Providers_new"},"new Providers(options)")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#Providers+createProvider"},".createProvider(request)")," \u21d2 ",(0,a.kt)("code",null,"Promise.","<","Object",">")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#Providers+getProvider"},".getProvider(ref)")," \u21d2 ",(0,a.kt)("code",null,"Promise.","<","Object",">")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#Providers+updateProvider"},".updateProvider(request)")," \u21d2 ",(0,a.kt)("code",null,"Promise.","<","Object",">")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#Providers+listProviders"},".listProviders(request)")," \u21d2 ",(0,a.kt)("code",null,"Promise.","<","ListProvidersResponse",">")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#Providers+deleteProvider"},".deleteProvider(ref)"))))),(0,a.kt)("a",{name:"new_Providers_new"}),(0,a.kt)("h3",{id:"new-providersoptions"},"new Providers(options)"),(0,a.kt)("p",null,"Constructs a new Providers object."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Param"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"options"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"ClientOptions")),(0,a.kt)("td",{parentName:"tr",align:null},"Options to indicate the objects endpoint")))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example"),"  "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const Fonoster = require("@fonoster/sdk");\nconst providers = new Fonoster.Providers();\n\nconst request = {\n  name: "SIP Provider",\n  username: "trunk001",\n  secret: "secretkey",\n  host: "sip.provider.net"\n};\n\nproviders.createProvider(request)\n.then(result => {\n  console.log(result)             // successful response\n}).catch(e => console.error(e));   // an error occurred\n')),(0,a.kt)("a",{name:"Providers+createProvider"}),(0,a.kt)("h3",{id:"providerscreateproviderrequest--promiseobject"},"providers.createProvider(request) \u21d2 ",(0,a.kt)("code",null,"Promise.","<","Object",">")),(0,a.kt)("p",null,"Creates a new Provider on the SIP Proxy subsystem."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Kind"),": instance method of ",(0,a.kt)("a",{parentName:"p",href:"#Providers"},(0,a.kt)("code",null,"Providers")),"  "),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Param"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"request"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"Object")),(0,a.kt)("td",{parentName:"tr",align:null},"Request for the provision of a new Provider")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"request.name"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"string")),(0,a.kt)("td",{parentName:"tr",align:null},"Friendly name to the Provider")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"request.username"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"string")),(0,a.kt)("td",{parentName:"tr",align:null},"Username for the trunk. No required for static IP authentication")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"request.secret"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"string")),(0,a.kt)("td",{parentName:"tr",align:null},"Password for the trunk. No required for static IP authentication")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"request.host"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"string")),(0,a.kt)("td",{parentName:"tr",align:null},"Hostname or IP of the Provider")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"request.transport"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"string")),(0,a.kt)("td",{parentName:"tr",align:null},"The transport for the Provider. Fonoster will use TCP if none is provided")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"request.expires"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"string")),(0,a.kt)("td",{parentName:"tr",align:null},"Expiration time for the registration.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"request.register"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"boolean")),(0,a.kt)("td",{parentName:"tr",align:null},"Indicates if the Provider should be registered Fonoster will use 600 if non is provided")))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example"),"  "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const request = {\n  name: "Provider Name",\n  username: "trunk001",\n  secret: "secretkey",\n  host: "sip.provider.net",\n  register: true\n};\n\nproviders.createProvider(request)\n.then(result => {\n  console.log(result)            // returns the Provider object\n}).catch(e => console.error(e));  // an error occurred\n')),(0,a.kt)("a",{name:"Providers+getProvider"}),(0,a.kt)("h3",{id:"providersgetproviderref--promiseobject"},"providers.getProvider(ref) \u21d2 ",(0,a.kt)("code",null,"Promise.","<","Object",">")),(0,a.kt)("p",null,"Retrieves a Provider by its reference."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Kind"),": instance method of ",(0,a.kt)("a",{parentName:"p",href:"#Providers"},(0,a.kt)("code",null,"Providers")),(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Returns"),": ",(0,a.kt)("code",null,"Promise.","<","Object",">")," - The provider",(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Throws"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"if ref is null or Provider does not exist")),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Param"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"ref"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"string")),(0,a.kt)("td",{parentName:"tr",align:null},"Reference to Provider")))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example"),"  "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"providers.getProvider(ref)\n.then(result => {\n  console.log(result)             // returns the Provider object\n}).catch(e => console.error(e));   // an error occurred\n")),(0,a.kt)("a",{name:"Providers+updateProvider"}),(0,a.kt)("h3",{id:"providersupdateproviderrequest--promiseobject"},"providers.updateProvider(request) \u21d2 ",(0,a.kt)("code",null,"Promise.","<","Object",">")),(0,a.kt)("p",null,"Update a Provider at the SIP Proxy subsystem."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Kind"),": instance method of ",(0,a.kt)("a",{parentName:"p",href:"#Providers"},(0,a.kt)("code",null,"Providers")),"  "),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Param"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"request"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"Object")),(0,a.kt)("td",{parentName:"tr",align:null},"Request to update a Provider")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"request.ref"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"string")),(0,a.kt)("td",{parentName:"tr",align:null},"Providers reference")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"request.name"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"string")),(0,a.kt)("td",{parentName:"tr",align:null},"Friendly name to the Provider")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"request.username"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"string")),(0,a.kt)("td",{parentName:"tr",align:null},"Username for the trunk. No required for static IP authentication")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"request.secret"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"string")),(0,a.kt)("td",{parentName:"tr",align:null},"Password for the trunk. No required for static IP authentication")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"request.host"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"string")),(0,a.kt)("td",{parentName:"tr",align:null},"Hostname or IP of the Provider")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"request.transport"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"string")),(0,a.kt)("td",{parentName:"tr",align:null},"The transport for the Provider. Fonoster will use TCP if none is provided")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"request.expires"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"string")),(0,a.kt)("td",{parentName:"tr",align:null},"Expiration time for the registration.")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"request.register"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"boolean")),(0,a.kt)("td",{parentName:"tr",align:null},"Indicates if the Provider should be registered Fonoster will use 600 if non is provided")))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example"),"  "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const request = {\n  ref: "hYTHYCYv_U",\n  host: "sip.provider.net"\n};\n\nproviders.updateProvider(request)\n.then(result => {\n  console.log(result)            // returns the Provider from the DB\n}).catch(e => console.error(e));  // an error occurred\n')),(0,a.kt)("a",{name:"Providers+listProviders"}),(0,a.kt)("h3",{id:"providerslistprovidersrequest--promiselistprovidersresponse"},"providers.listProviders(request) \u21d2 ",(0,a.kt)("code",null,"Promise.","<","ListProvidersResponse",">")),(0,a.kt)("p",null,"List the Providers registered in Fonoster SIP Proxy subsystem."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Kind"),": instance method of ",(0,a.kt)("a",{parentName:"p",href:"#Providers"},(0,a.kt)("code",null,"Providers")),(0,a.kt)("br",{parentName:"p"}),"\n",(0,a.kt)("strong",{parentName:"p"},"Returns"),": ",(0,a.kt)("code",null,"Promise.","<","ListProvidersResponse",">")," - List of Providers  "),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Param"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"request"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"Object")),(0,a.kt)("td",{parentName:"tr",align:null})),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"request.pageSize"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"provider")),(0,a.kt)("td",{parentName:"tr",align:null},"Provider of element per page (defaults to 20)")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"request.pageToken"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"string")),(0,a.kt)("td",{parentName:"tr",align:null},"The next_page_token value returned from a previous List request, if any")))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example"),"  "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"const request = {\n   pageSize: 20,\n   pageToken: 2\n};\n\nproviders.listProviders(request)\n.then(() => {\n  console.log(result)            // returns a ListProvidersResponse object\n}).catch(e => console.error(e));  // an error occurred\n")),(0,a.kt)("a",{name:"Providers+deleteProvider"}),(0,a.kt)("h3",{id:"providersdeleteproviderref"},"providers.deleteProvider(ref)"),(0,a.kt)("p",null,'Deletes a Provider from SIP Proxy subsystem. Notice, that in order to delete\na Provider, you must first delete all it"s Agents.'),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Kind"),": instance method of ",(0,a.kt)("a",{parentName:"p",href:"#Providers"},(0,a.kt)("code",null,"Providers")),"  "),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Param"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"ref"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("code",null,"string")),(0,a.kt)("td",{parentName:"tr",align:null},"Reference to the Provider")))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example"),"  "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const ref = "hYTHYCYv_U";\n\nproviders.deleteProvider(ref)\n.then(() => {\n  console.log("done")            // returns an empty object\n}).catch(e => console.error(e));  // an error occurred\n')))}m.isMDXComponent=!0}}]);